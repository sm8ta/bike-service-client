// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"webike_bike_microservice_nikita/models"
)

// DeleteComponentsIDReader is a Reader for the DeleteComponentsID structure.
type DeleteComponentsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteComponentsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteComponentsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteComponentsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteComponentsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /components/{id}] DeleteComponentsID", response, response.Code())
	}
}

// NewDeleteComponentsIDOK creates a DeleteComponentsIDOK with default headers values
func NewDeleteComponentsIDOK() *DeleteComponentsIDOK {
	return &DeleteComponentsIDOK{}
}

/*
DeleteComponentsIDOK describes a response with status code 200, with default header values.

Компонент удален
*/
type DeleteComponentsIDOK struct {
	Payload *models.InternalAdapterHandlerHTTPSuccessResponse
}

// IsSuccess returns true when this delete components Id o k response has a 2xx status code
func (o *DeleteComponentsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete components Id o k response has a 3xx status code
func (o *DeleteComponentsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete components Id o k response has a 4xx status code
func (o *DeleteComponentsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete components Id o k response has a 5xx status code
func (o *DeleteComponentsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete components Id o k response a status code equal to that given
func (o *DeleteComponentsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete components Id o k response
func (o *DeleteComponentsIDOK) Code() int {
	return 200
}

func (o *DeleteComponentsIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /components/{id}][%d] deleteComponentsIdOK %s", 200, payload)
}

func (o *DeleteComponentsIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /components/{id}][%d] deleteComponentsIdOK %s", 200, payload)
}

func (o *DeleteComponentsIDOK) GetPayload() *models.InternalAdapterHandlerHTTPSuccessResponse {
	return o.Payload
}

func (o *DeleteComponentsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteComponentsIDUnauthorized creates a DeleteComponentsIDUnauthorized with default headers values
func NewDeleteComponentsIDUnauthorized() *DeleteComponentsIDUnauthorized {
	return &DeleteComponentsIDUnauthorized{}
}

/*
DeleteComponentsIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type DeleteComponentsIDUnauthorized struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this delete components Id unauthorized response has a 2xx status code
func (o *DeleteComponentsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete components Id unauthorized response has a 3xx status code
func (o *DeleteComponentsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete components Id unauthorized response has a 4xx status code
func (o *DeleteComponentsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete components Id unauthorized response has a 5xx status code
func (o *DeleteComponentsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete components Id unauthorized response a status code equal to that given
func (o *DeleteComponentsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete components Id unauthorized response
func (o *DeleteComponentsIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteComponentsIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /components/{id}][%d] deleteComponentsIdUnauthorized %s", 401, payload)
}

func (o *DeleteComponentsIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /components/{id}][%d] deleteComponentsIdUnauthorized %s", 401, payload)
}

func (o *DeleteComponentsIDUnauthorized) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *DeleteComponentsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteComponentsIDForbidden creates a DeleteComponentsIDForbidden with default headers values
func NewDeleteComponentsIDForbidden() *DeleteComponentsIDForbidden {
	return &DeleteComponentsIDForbidden{}
}

/*
DeleteComponentsIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type DeleteComponentsIDForbidden struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this delete components Id forbidden response has a 2xx status code
func (o *DeleteComponentsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete components Id forbidden response has a 3xx status code
func (o *DeleteComponentsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete components Id forbidden response has a 4xx status code
func (o *DeleteComponentsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete components Id forbidden response has a 5xx status code
func (o *DeleteComponentsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete components Id forbidden response a status code equal to that given
func (o *DeleteComponentsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete components Id forbidden response
func (o *DeleteComponentsIDForbidden) Code() int {
	return 403
}

func (o *DeleteComponentsIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /components/{id}][%d] deleteComponentsIdForbidden %s", 403, payload)
}

func (o *DeleteComponentsIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /components/{id}][%d] deleteComponentsIdForbidden %s", 403, payload)
}

func (o *DeleteComponentsIDForbidden) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *DeleteComponentsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
