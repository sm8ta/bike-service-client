// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// PutComponentsIDReader is a Reader for the PutComponentsID structure.
type PutComponentsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutComponentsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPutComponentsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutComponentsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutComponentsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutComponentsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /components/{id}] PutComponentsID", response, response.Code())
	}
}

// NewPutComponentsIDOK creates a PutComponentsIDOK with default headers values
func NewPutComponentsIDOK() *PutComponentsIDOK {
	return &PutComponentsIDOK{}
}

/*
PutComponentsIDOK describes a response with status code 200, with default header values.

Компонент обновлен
*/
type PutComponentsIDOK struct {
	Payload *PutComponentsIDOKBody
}

// IsSuccess returns true when this put components Id o k response has a 2xx status code
func (o *PutComponentsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put components Id o k response has a 3xx status code
func (o *PutComponentsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id o k response has a 4xx status code
func (o *PutComponentsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put components Id o k response has a 5xx status code
func (o *PutComponentsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id o k response a status code equal to that given
func (o *PutComponentsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put components Id o k response
func (o *PutComponentsIDOK) Code() int {
	return 200
}

func (o *PutComponentsIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdOK %s", 200, payload)
}

func (o *PutComponentsIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdOK %s", 200, payload)
}

func (o *PutComponentsIDOK) GetPayload() *PutComponentsIDOKBody {
	return o.Payload
}

func (o *PutComponentsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutComponentsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutComponentsIDBadRequest creates a PutComponentsIDBadRequest with default headers values
func NewPutComponentsIDBadRequest() *PutComponentsIDBadRequest {
	return &PutComponentsIDBadRequest{}
}

/*
PutComponentsIDBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PutComponentsIDBadRequest struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this put components Id bad request response has a 2xx status code
func (o *PutComponentsIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put components Id bad request response has a 3xx status code
func (o *PutComponentsIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id bad request response has a 4xx status code
func (o *PutComponentsIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put components Id bad request response has a 5xx status code
func (o *PutComponentsIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id bad request response a status code equal to that given
func (o *PutComponentsIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put components Id bad request response
func (o *PutComponentsIDBadRequest) Code() int {
	return 400
}

func (o *PutComponentsIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdBadRequest %s", 400, payload)
}

func (o *PutComponentsIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdBadRequest %s", 400, payload)
}

func (o *PutComponentsIDBadRequest) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PutComponentsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutComponentsIDUnauthorized creates a PutComponentsIDUnauthorized with default headers values
func NewPutComponentsIDUnauthorized() *PutComponentsIDUnauthorized {
	return &PutComponentsIDUnauthorized{}
}

/*
PutComponentsIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PutComponentsIDUnauthorized struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this put components Id unauthorized response has a 2xx status code
func (o *PutComponentsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put components Id unauthorized response has a 3xx status code
func (o *PutComponentsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id unauthorized response has a 4xx status code
func (o *PutComponentsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put components Id unauthorized response has a 5xx status code
func (o *PutComponentsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id unauthorized response a status code equal to that given
func (o *PutComponentsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put components Id unauthorized response
func (o *PutComponentsIDUnauthorized) Code() int {
	return 401
}

func (o *PutComponentsIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdUnauthorized %s", 401, payload)
}

func (o *PutComponentsIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdUnauthorized %s", 401, payload)
}

func (o *PutComponentsIDUnauthorized) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PutComponentsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutComponentsIDForbidden creates a PutComponentsIDForbidden with default headers values
func NewPutComponentsIDForbidden() *PutComponentsIDForbidden {
	return &PutComponentsIDForbidden{}
}

/*
PutComponentsIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type PutComponentsIDForbidden struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this put components Id forbidden response has a 2xx status code
func (o *PutComponentsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put components Id forbidden response has a 3xx status code
func (o *PutComponentsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id forbidden response has a 4xx status code
func (o *PutComponentsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put components Id forbidden response has a 5xx status code
func (o *PutComponentsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id forbidden response a status code equal to that given
func (o *PutComponentsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put components Id forbidden response
func (o *PutComponentsIDForbidden) Code() int {
	return 403
}

func (o *PutComponentsIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdForbidden %s", 403, payload)
}

func (o *PutComponentsIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdForbidden %s", 403, payload)
}

func (o *PutComponentsIDForbidden) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PutComponentsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
PutComponentsIDOKBody put components ID o k body
swagger:model PutComponentsIDOKBody
*/
type PutComponentsIDOKBody struct {
	models.InternalAdapterHandlerHTTPSuccessResponse

	// data
	Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutComponentsIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutComponentsIDOKBodyAO0
	var putComponentsIDOKBodyAO0 models.InternalAdapterHandlerHTTPSuccessResponse
	if err := swag.ReadJSON(raw, &putComponentsIDOKBodyAO0); err != nil {
		return err
	}
	o.InternalAdapterHandlerHTTPSuccessResponse = putComponentsIDOKBodyAO0

	// PutComponentsIDOKBodyAO1
	var dataPutComponentsIDOKBodyAO1 struct {
		Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutComponentsIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutComponentsIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutComponentsIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putComponentsIDOKBodyAO0, err := swag.WriteJSON(o.InternalAdapterHandlerHTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putComponentsIDOKBodyAO0)
	var dataPutComponentsIDOKBodyAO1 struct {
		Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"data,omitempty"`
	}

	dataPutComponentsIDOKBodyAO1.Data = o.Data

	jsonDataPutComponentsIDOKBodyAO1, errPutComponentsIDOKBodyAO1 := swag.WriteJSON(dataPutComponentsIDOKBodyAO1)
	if errPutComponentsIDOKBodyAO1 != nil {
		return nil, errPutComponentsIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutComponentsIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put components ID o k body
func (o *PutComponentsIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutComponentsIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("putComponentsIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("putComponentsIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this put components ID o k body based on the context it is used
func (o *PutComponentsIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutComponentsIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("putComponentsIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("putComponentsIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutComponentsIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutComponentsIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutComponentsIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
