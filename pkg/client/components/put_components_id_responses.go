// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// PutComponentsIDReader is a Reader for the PutComponentsID structure.
type PutComponentsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutComponentsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPutComponentsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutComponentsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutComponentsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutComponentsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /components/{id}] PutComponentsID", response, response.Code())
	}
}

// NewPutComponentsIDOK creates a PutComponentsIDOK with default headers values
func NewPutComponentsIDOK() *PutComponentsIDOK {
	return &PutComponentsIDOK{}
}

/*
PutComponentsIDOK describes a response with status code 200, with default header values.

Компонент обновлен
*/
type PutComponentsIDOK struct {
	Payload *models.HTTPSuccessResponse
}

// IsSuccess returns true when this put components Id o k response has a 2xx status code
func (o *PutComponentsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put components Id o k response has a 3xx status code
func (o *PutComponentsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id o k response has a 4xx status code
func (o *PutComponentsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put components Id o k response has a 5xx status code
func (o *PutComponentsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id o k response a status code equal to that given
func (o *PutComponentsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put components Id o k response
func (o *PutComponentsIDOK) Code() int {
	return 200
}

func (o *PutComponentsIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdOK %s", 200, payload)
}

func (o *PutComponentsIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdOK %s", 200, payload)
}

func (o *PutComponentsIDOK) GetPayload() *models.HTTPSuccessResponse {
	return o.Payload
}

func (o *PutComponentsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutComponentsIDBadRequest creates a PutComponentsIDBadRequest with default headers values
func NewPutComponentsIDBadRequest() *PutComponentsIDBadRequest {
	return &PutComponentsIDBadRequest{}
}

/*
PutComponentsIDBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PutComponentsIDBadRequest struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this put components Id bad request response has a 2xx status code
func (o *PutComponentsIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put components Id bad request response has a 3xx status code
func (o *PutComponentsIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id bad request response has a 4xx status code
func (o *PutComponentsIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put components Id bad request response has a 5xx status code
func (o *PutComponentsIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id bad request response a status code equal to that given
func (o *PutComponentsIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put components Id bad request response
func (o *PutComponentsIDBadRequest) Code() int {
	return 400
}

func (o *PutComponentsIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdBadRequest %s", 400, payload)
}

func (o *PutComponentsIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdBadRequest %s", 400, payload)
}

func (o *PutComponentsIDBadRequest) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PutComponentsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutComponentsIDUnauthorized creates a PutComponentsIDUnauthorized with default headers values
func NewPutComponentsIDUnauthorized() *PutComponentsIDUnauthorized {
	return &PutComponentsIDUnauthorized{}
}

/*
PutComponentsIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PutComponentsIDUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this put components Id unauthorized response has a 2xx status code
func (o *PutComponentsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put components Id unauthorized response has a 3xx status code
func (o *PutComponentsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id unauthorized response has a 4xx status code
func (o *PutComponentsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put components Id unauthorized response has a 5xx status code
func (o *PutComponentsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id unauthorized response a status code equal to that given
func (o *PutComponentsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put components Id unauthorized response
func (o *PutComponentsIDUnauthorized) Code() int {
	return 401
}

func (o *PutComponentsIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdUnauthorized %s", 401, payload)
}

func (o *PutComponentsIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdUnauthorized %s", 401, payload)
}

func (o *PutComponentsIDUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PutComponentsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutComponentsIDForbidden creates a PutComponentsIDForbidden with default headers values
func NewPutComponentsIDForbidden() *PutComponentsIDForbidden {
	return &PutComponentsIDForbidden{}
}

/*
PutComponentsIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type PutComponentsIDForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this put components Id forbidden response has a 2xx status code
func (o *PutComponentsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put components Id forbidden response has a 3xx status code
func (o *PutComponentsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put components Id forbidden response has a 4xx status code
func (o *PutComponentsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put components Id forbidden response has a 5xx status code
func (o *PutComponentsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put components Id forbidden response a status code equal to that given
func (o *PutComponentsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put components Id forbidden response
func (o *PutComponentsIDForbidden) Code() int {
	return 403
}

func (o *PutComponentsIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdForbidden %s", 403, payload)
}

func (o *PutComponentsIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /components/{id}][%d] putComponentsIdForbidden %s", 403, payload)
}

func (o *PutComponentsIDForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PutComponentsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
