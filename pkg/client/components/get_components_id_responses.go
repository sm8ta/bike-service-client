// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// GetComponentsIDReader is a Reader for the GetComponentsID structure.
type GetComponentsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetComponentsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetComponentsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetComponentsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetComponentsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetComponentsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /components/{id}] GetComponentsID", response, response.Code())
	}
}

// NewGetComponentsIDOK creates a GetComponentsIDOK with default headers values
func NewGetComponentsIDOK() *GetComponentsIDOK {
	return &GetComponentsIDOK{}
}

/*
GetComponentsIDOK describes a response with status code 200, with default header values.

Компонент найден
*/
type GetComponentsIDOK struct {
	Payload *models.HTTPSuccessResponse
}

// IsSuccess returns true when this get components Id o k response has a 2xx status code
func (o *GetComponentsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get components Id o k response has a 3xx status code
func (o *GetComponentsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get components Id o k response has a 4xx status code
func (o *GetComponentsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get components Id o k response has a 5xx status code
func (o *GetComponentsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get components Id o k response a status code equal to that given
func (o *GetComponentsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get components Id o k response
func (o *GetComponentsIDOK) Code() int {
	return 200
}

func (o *GetComponentsIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdOK %s", 200, payload)
}

func (o *GetComponentsIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdOK %s", 200, payload)
}

func (o *GetComponentsIDOK) GetPayload() *models.HTTPSuccessResponse {
	return o.Payload
}

func (o *GetComponentsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetComponentsIDUnauthorized creates a GetComponentsIDUnauthorized with default headers values
func NewGetComponentsIDUnauthorized() *GetComponentsIDUnauthorized {
	return &GetComponentsIDUnauthorized{}
}

/*
GetComponentsIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetComponentsIDUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get components Id unauthorized response has a 2xx status code
func (o *GetComponentsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get components Id unauthorized response has a 3xx status code
func (o *GetComponentsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get components Id unauthorized response has a 4xx status code
func (o *GetComponentsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get components Id unauthorized response has a 5xx status code
func (o *GetComponentsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get components Id unauthorized response a status code equal to that given
func (o *GetComponentsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get components Id unauthorized response
func (o *GetComponentsIDUnauthorized) Code() int {
	return 401
}

func (o *GetComponentsIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdUnauthorized %s", 401, payload)
}

func (o *GetComponentsIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdUnauthorized %s", 401, payload)
}

func (o *GetComponentsIDUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetComponentsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetComponentsIDForbidden creates a GetComponentsIDForbidden with default headers values
func NewGetComponentsIDForbidden() *GetComponentsIDForbidden {
	return &GetComponentsIDForbidden{}
}

/*
GetComponentsIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type GetComponentsIDForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get components Id forbidden response has a 2xx status code
func (o *GetComponentsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get components Id forbidden response has a 3xx status code
func (o *GetComponentsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get components Id forbidden response has a 4xx status code
func (o *GetComponentsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get components Id forbidden response has a 5xx status code
func (o *GetComponentsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get components Id forbidden response a status code equal to that given
func (o *GetComponentsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get components Id forbidden response
func (o *GetComponentsIDForbidden) Code() int {
	return 403
}

func (o *GetComponentsIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdForbidden %s", 403, payload)
}

func (o *GetComponentsIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdForbidden %s", 403, payload)
}

func (o *GetComponentsIDForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetComponentsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetComponentsIDNotFound creates a GetComponentsIDNotFound with default headers values
func NewGetComponentsIDNotFound() *GetComponentsIDNotFound {
	return &GetComponentsIDNotFound{}
}

/*
GetComponentsIDNotFound describes a response with status code 404, with default header values.

Компонент не найден
*/
type GetComponentsIDNotFound struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get components Id not found response has a 2xx status code
func (o *GetComponentsIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get components Id not found response has a 3xx status code
func (o *GetComponentsIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get components Id not found response has a 4xx status code
func (o *GetComponentsIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get components Id not found response has a 5xx status code
func (o *GetComponentsIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get components Id not found response a status code equal to that given
func (o *GetComponentsIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get components Id not found response
func (o *GetComponentsIDNotFound) Code() int {
	return 404
}

func (o *GetComponentsIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdNotFound %s", 404, payload)
}

func (o *GetComponentsIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /components/{id}][%d] getComponentsIdNotFound %s", 404, payload)
}

func (o *GetComponentsIDNotFound) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetComponentsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
