// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// PostComponentsReader is a Reader for the PostComponents structure.
type PostComponentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostComponentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewPostComponentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostComponentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostComponentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostComponentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /components] PostComponents", response, response.Code())
	}
}

// NewPostComponentsCreated creates a PostComponentsCreated with default headers values
func NewPostComponentsCreated() *PostComponentsCreated {
	return &PostComponentsCreated{}
}

/*
PostComponentsCreated describes a response with status code 201, with default header values.

Компонент создан
*/
type PostComponentsCreated struct {
	Payload *models.HTTPSuccessResponse
}

// IsSuccess returns true when this post components created response has a 2xx status code
func (o *PostComponentsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post components created response has a 3xx status code
func (o *PostComponentsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components created response has a 4xx status code
func (o *PostComponentsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post components created response has a 5xx status code
func (o *PostComponentsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post components created response a status code equal to that given
func (o *PostComponentsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post components created response
func (o *PostComponentsCreated) Code() int {
	return 201
}

func (o *PostComponentsCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsCreated %s", 201, payload)
}

func (o *PostComponentsCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsCreated %s", 201, payload)
}

func (o *PostComponentsCreated) GetPayload() *models.HTTPSuccessResponse {
	return o.Payload
}

func (o *PostComponentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostComponentsBadRequest creates a PostComponentsBadRequest with default headers values
func NewPostComponentsBadRequest() *PostComponentsBadRequest {
	return &PostComponentsBadRequest{}
}

/*
PostComponentsBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PostComponentsBadRequest struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post components bad request response has a 2xx status code
func (o *PostComponentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post components bad request response has a 3xx status code
func (o *PostComponentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components bad request response has a 4xx status code
func (o *PostComponentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post components bad request response has a 5xx status code
func (o *PostComponentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post components bad request response a status code equal to that given
func (o *PostComponentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post components bad request response
func (o *PostComponentsBadRequest) Code() int {
	return 400
}

func (o *PostComponentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsBadRequest %s", 400, payload)
}

func (o *PostComponentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsBadRequest %s", 400, payload)
}

func (o *PostComponentsBadRequest) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostComponentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostComponentsUnauthorized creates a PostComponentsUnauthorized with default headers values
func NewPostComponentsUnauthorized() *PostComponentsUnauthorized {
	return &PostComponentsUnauthorized{}
}

/*
PostComponentsUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PostComponentsUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post components unauthorized response has a 2xx status code
func (o *PostComponentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post components unauthorized response has a 3xx status code
func (o *PostComponentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components unauthorized response has a 4xx status code
func (o *PostComponentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post components unauthorized response has a 5xx status code
func (o *PostComponentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post components unauthorized response a status code equal to that given
func (o *PostComponentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post components unauthorized response
func (o *PostComponentsUnauthorized) Code() int {
	return 401
}

func (o *PostComponentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsUnauthorized %s", 401, payload)
}

func (o *PostComponentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsUnauthorized %s", 401, payload)
}

func (o *PostComponentsUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostComponentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostComponentsForbidden creates a PostComponentsForbidden with default headers values
func NewPostComponentsForbidden() *PostComponentsForbidden {
	return &PostComponentsForbidden{}
}

/*
PostComponentsForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type PostComponentsForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post components forbidden response has a 2xx status code
func (o *PostComponentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post components forbidden response has a 3xx status code
func (o *PostComponentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components forbidden response has a 4xx status code
func (o *PostComponentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post components forbidden response has a 5xx status code
func (o *PostComponentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post components forbidden response a status code equal to that given
func (o *PostComponentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post components forbidden response
func (o *PostComponentsForbidden) Code() int {
	return 403
}

func (o *PostComponentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsForbidden %s", 403, payload)
}

func (o *PostComponentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsForbidden %s", 403, payload)
}

func (o *PostComponentsForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostComponentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
