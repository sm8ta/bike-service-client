// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"webike_bike_microservice_nikita/models"
)

// PostComponentsReader is a Reader for the PostComponents structure.
type PostComponentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostComponentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewPostComponentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostComponentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostComponentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostComponentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /components] PostComponents", response, response.Code())
	}
}

// NewPostComponentsCreated creates a PostComponentsCreated with default headers values
func NewPostComponentsCreated() *PostComponentsCreated {
	return &PostComponentsCreated{}
}

/*
PostComponentsCreated describes a response with status code 201, with default header values.

Компонент создан
*/
type PostComponentsCreated struct {
	Payload *PostComponentsCreatedBody
}

// IsSuccess returns true when this post components created response has a 2xx status code
func (o *PostComponentsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post components created response has a 3xx status code
func (o *PostComponentsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components created response has a 4xx status code
func (o *PostComponentsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post components created response has a 5xx status code
func (o *PostComponentsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post components created response a status code equal to that given
func (o *PostComponentsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post components created response
func (o *PostComponentsCreated) Code() int {
	return 201
}

func (o *PostComponentsCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsCreated %s", 201, payload)
}

func (o *PostComponentsCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsCreated %s", 201, payload)
}

func (o *PostComponentsCreated) GetPayload() *PostComponentsCreatedBody {
	return o.Payload
}

func (o *PostComponentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostComponentsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostComponentsBadRequest creates a PostComponentsBadRequest with default headers values
func NewPostComponentsBadRequest() *PostComponentsBadRequest {
	return &PostComponentsBadRequest{}
}

/*
PostComponentsBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PostComponentsBadRequest struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this post components bad request response has a 2xx status code
func (o *PostComponentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post components bad request response has a 3xx status code
func (o *PostComponentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components bad request response has a 4xx status code
func (o *PostComponentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post components bad request response has a 5xx status code
func (o *PostComponentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post components bad request response a status code equal to that given
func (o *PostComponentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post components bad request response
func (o *PostComponentsBadRequest) Code() int {
	return 400
}

func (o *PostComponentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsBadRequest %s", 400, payload)
}

func (o *PostComponentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsBadRequest %s", 400, payload)
}

func (o *PostComponentsBadRequest) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PostComponentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostComponentsUnauthorized creates a PostComponentsUnauthorized with default headers values
func NewPostComponentsUnauthorized() *PostComponentsUnauthorized {
	return &PostComponentsUnauthorized{}
}

/*
PostComponentsUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PostComponentsUnauthorized struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this post components unauthorized response has a 2xx status code
func (o *PostComponentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post components unauthorized response has a 3xx status code
func (o *PostComponentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components unauthorized response has a 4xx status code
func (o *PostComponentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post components unauthorized response has a 5xx status code
func (o *PostComponentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post components unauthorized response a status code equal to that given
func (o *PostComponentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post components unauthorized response
func (o *PostComponentsUnauthorized) Code() int {
	return 401
}

func (o *PostComponentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsUnauthorized %s", 401, payload)
}

func (o *PostComponentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsUnauthorized %s", 401, payload)
}

func (o *PostComponentsUnauthorized) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PostComponentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostComponentsForbidden creates a PostComponentsForbidden with default headers values
func NewPostComponentsForbidden() *PostComponentsForbidden {
	return &PostComponentsForbidden{}
}

/*
PostComponentsForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type PostComponentsForbidden struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this post components forbidden response has a 2xx status code
func (o *PostComponentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post components forbidden response has a 3xx status code
func (o *PostComponentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post components forbidden response has a 4xx status code
func (o *PostComponentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post components forbidden response has a 5xx status code
func (o *PostComponentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post components forbidden response a status code equal to that given
func (o *PostComponentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post components forbidden response
func (o *PostComponentsForbidden) Code() int {
	return 403
}

func (o *PostComponentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsForbidden %s", 403, payload)
}

func (o *PostComponentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /components][%d] postComponentsForbidden %s", 403, payload)
}

func (o *PostComponentsForbidden) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PostComponentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
PostComponentsCreatedBody post components created body
swagger:model PostComponentsCreatedBody
*/
type PostComponentsCreatedBody struct {
	models.InternalAdapterHandlerHTTPSuccessResponse

	// data
	Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostComponentsCreatedBody) UnmarshalJSON(raw []byte) error {
	// PostComponentsCreatedBodyAO0
	var postComponentsCreatedBodyAO0 models.InternalAdapterHandlerHTTPSuccessResponse
	if err := swag.ReadJSON(raw, &postComponentsCreatedBodyAO0); err != nil {
		return err
	}
	o.InternalAdapterHandlerHTTPSuccessResponse = postComponentsCreatedBodyAO0

	// PostComponentsCreatedBodyAO1
	var dataPostComponentsCreatedBodyAO1 struct {
		Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostComponentsCreatedBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostComponentsCreatedBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostComponentsCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postComponentsCreatedBodyAO0, err := swag.WriteJSON(o.InternalAdapterHandlerHTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postComponentsCreatedBodyAO0)
	var dataPostComponentsCreatedBodyAO1 struct {
		Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"data,omitempty"`
	}

	dataPostComponentsCreatedBodyAO1.Data = o.Data

	jsonDataPostComponentsCreatedBodyAO1, errPostComponentsCreatedBodyAO1 := swag.WriteJSON(dataPostComponentsCreatedBodyAO1)
	if errPostComponentsCreatedBodyAO1 != nil {
		return nil, errPostComponentsCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataPostComponentsCreatedBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post components created body
func (o *PostComponentsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostComponentsCreatedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("postComponentsCreated" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("postComponentsCreated" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this post components created body based on the context it is used
func (o *PostComponentsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostComponentsCreatedBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("postComponentsCreated" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("postComponentsCreated" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostComponentsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostComponentsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostComponentsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
