// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebikeBikeMicroserviceNikitaInternalCoreDomainBike webike bike microservice nikita internal core domain bike
//
// swagger:model webike_bike_microservice_nikita_internal_core_domain.Bike
type WebikeBikeMicroserviceNikitaInternalCoreDomainBike struct {

	// bike id
	BikeID string `json:"bike_id,omitempty"`

	// bike name
	BikeName string `json:"bike_name,omitempty"`

	// components
	Components []*WebikeBikeMicroserviceNikitaInternalCoreDomainComponent `json:"components"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// mileage
	Mileage int64 `json:"mileage,omitempty"`

	// stels
	Model string `json:"model,omitempty"`

	// type
	Type WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`

	// year
	Year int64 `json:"year,omitempty"`
}

// Validate validates this webike bike microservice nikita internal core domain bike
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.Components) { // not required
		return nil
	}

	for i := 0; i < len(m.Components); i++ {
		if swag.IsZero(m.Components[i]) { // not required
			continue
		}

		if m.Components[i] != nil {
			if err := m.Components[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

// ContextValidate validate this webike bike microservice nikita internal core domain bike based on the context it is used
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Components); i++ {

		if m.Components[i] != nil {

			if swag.IsZero(m.Components[i]) { // not required
				return nil
			}

			if err := m.Components[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("components" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("components" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainBike) UnmarshalBinary(b []byte) error {
	var res WebikeBikeMicroserviceNikitaInternalCoreDomainBike
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
