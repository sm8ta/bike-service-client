// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebikeBikeMicroserviceNikitaInternalCoreDomainComponent webike bike microservice nikita internal core domain component
//
// swagger:model webike_bike_microservice_nikita_internal_core_domain.Component
type WebikeBikeMicroserviceNikitaInternalCoreDomainComponent struct {

	// bike id
	// Required: true
	BikeID *string `json:"bike_id"`

	// brand
	// Max Length: 100
	Brand string `json:"brand,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// installed at
	// Required: true
	InstalledAt *string `json:"installed_at"`

	// installed mileage
	// Minimum: 0
	InstalledMileage *int64 `json:"installed_mileage,omitempty"`

	// max mileage
	// Required: true
	// Maximum: 1e+06
	// Minimum: 1
	MaxMileage *int64 `json:"max_mileage"`

	// model
	// Max Length: 100
	Model string `json:"model,omitempty"`

	// name
	// Required: true
	// Enum: ["handlebars","frame","wheels"]
	Name struct {
		WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName
	} `json:"name"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this webike bike microservice nikita internal core domain component
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBikeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledMileage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMileage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateBikeID(formats strfmt.Registry) error {

	if err := validate.Required("bike_id", "body", m.BikeID); err != nil {
		return err
	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateBrand(formats strfmt.Registry) error {
	if swag.IsZero(m.Brand) { // not required
		return nil
	}

	if err := validate.MaxLength("brand", "body", m.Brand, 100); err != nil {
		return err
	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateInstalledAt(formats strfmt.Registry) error {

	if err := validate.Required("installed_at", "body", m.InstalledAt); err != nil {
		return err
	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateInstalledMileage(formats strfmt.Registry) error {
	if swag.IsZero(m.InstalledMileage) { // not required
		return nil
	}

	if err := validate.MinimumInt("installed_mileage", "body", *m.InstalledMileage, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateMaxMileage(formats strfmt.Registry) error {

	if err := validate.Required("max_mileage", "body", m.MaxMileage); err != nil {
		return err
	}

	if err := validate.MinimumInt("max_mileage", "body", *m.MaxMileage, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max_mileage", "body", *m.MaxMileage, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if err := validate.MaxLength("model", "body", m.Model, 100); err != nil {
		return err
	}

	return nil
}

var webikeBikeMicroserviceNikitaInternalCoreDomainComponentTypeNamePropEnum []any

func init() {
	var res []struct {
		WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName
	}
	if err := json.Unmarshal([]byte(`["handlebars","frame","wheels"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webikeBikeMicroserviceNikitaInternalCoreDomainComponentTypeNamePropEnum = append(webikeBikeMicroserviceNikitaInternalCoreDomainComponentTypeNamePropEnum, v)
	}
}

// prop value enum
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateNameEnum(path, location string, value *struct {
	WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName
}) error {
	if err := validate.EnumCase(path, location, value, webikeBikeMicroserviceNikitaInternalCoreDomainComponentTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) validateName(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this webike bike microservice nikita internal core domain component based on the context it is used
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebikeBikeMicroserviceNikitaInternalCoreDomainComponent) UnmarshalBinary(b []byte) error {
	var res WebikeBikeMicroserviceNikitaInternalCoreDomainComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
