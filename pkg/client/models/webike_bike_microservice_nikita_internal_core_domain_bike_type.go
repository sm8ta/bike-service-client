// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType webike bike microservice nikita internal core domain bike type
//
// swagger:model webike_bike_microservice_nikita_internal_core_domain.BikeType
type WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType string

func NewWebikeBikeMicroserviceNikitaInternalCoreDomainBikeType(value WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType) *WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType.
func (m WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType) Pointer() *WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType {
	return &m
}

const (

	// WebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeBmx captures enum value "bmx"
	WebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeBmx WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType = "bmx"

	// WebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeMtb captures enum value "mtb"
	WebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeMtb WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType = "mtb"

	// WebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeRoad captures enum value "road"
	WebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeRoad WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType = "road"
)

// for schema
var webikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeEnum []any

func init() {
	var res []WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType
	if err := json.Unmarshal([]byte(`["bmx","mtb","road"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeEnum = append(webikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeEnum, v)
	}
}

func (m WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType) validateWebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeEnum(path, location string, value WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType) error {
	if err := validate.EnumCase(path, location, value, webikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this webike bike microservice nikita internal core domain bike type
func (m WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWebikeBikeMicroserviceNikitaInternalCoreDomainBikeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this webike bike microservice nikita internal core domain bike type based on context it is used
func (m WebikeBikeMicroserviceNikitaInternalCoreDomainBikeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
