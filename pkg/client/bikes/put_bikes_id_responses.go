// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// PutBikesIDReader is a Reader for the PutBikesID structure.
type PutBikesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBikesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPutBikesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutBikesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutBikesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutBikesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /bikes/{id}] PutBikesID", response, response.Code())
	}
}

// NewPutBikesIDOK creates a PutBikesIDOK with default headers values
func NewPutBikesIDOK() *PutBikesIDOK {
	return &PutBikesIDOK{}
}

/*
PutBikesIDOK describes a response with status code 200, with default header values.

Байк обновлен
*/
type PutBikesIDOK struct {
	Payload *PutBikesIDOKBody
}

// IsSuccess returns true when this put bikes Id o k response has a 2xx status code
func (o *PutBikesIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put bikes Id o k response has a 3xx status code
func (o *PutBikesIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put bikes Id o k response has a 4xx status code
func (o *PutBikesIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put bikes Id o k response has a 5xx status code
func (o *PutBikesIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put bikes Id o k response a status code equal to that given
func (o *PutBikesIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put bikes Id o k response
func (o *PutBikesIDOK) Code() int {
	return 200
}

func (o *PutBikesIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdOK %s", 200, payload)
}

func (o *PutBikesIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdOK %s", 200, payload)
}

func (o *PutBikesIDOK) GetPayload() *PutBikesIDOKBody {
	return o.Payload
}

func (o *PutBikesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutBikesIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutBikesIDBadRequest creates a PutBikesIDBadRequest with default headers values
func NewPutBikesIDBadRequest() *PutBikesIDBadRequest {
	return &PutBikesIDBadRequest{}
}

/*
PutBikesIDBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PutBikesIDBadRequest struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this put bikes Id bad request response has a 2xx status code
func (o *PutBikesIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put bikes Id bad request response has a 3xx status code
func (o *PutBikesIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put bikes Id bad request response has a 4xx status code
func (o *PutBikesIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put bikes Id bad request response has a 5xx status code
func (o *PutBikesIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put bikes Id bad request response a status code equal to that given
func (o *PutBikesIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put bikes Id bad request response
func (o *PutBikesIDBadRequest) Code() int {
	return 400
}

func (o *PutBikesIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdBadRequest %s", 400, payload)
}

func (o *PutBikesIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdBadRequest %s", 400, payload)
}

func (o *PutBikesIDBadRequest) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PutBikesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutBikesIDUnauthorized creates a PutBikesIDUnauthorized with default headers values
func NewPutBikesIDUnauthorized() *PutBikesIDUnauthorized {
	return &PutBikesIDUnauthorized{}
}

/*
PutBikesIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PutBikesIDUnauthorized struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this put bikes Id unauthorized response has a 2xx status code
func (o *PutBikesIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put bikes Id unauthorized response has a 3xx status code
func (o *PutBikesIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put bikes Id unauthorized response has a 4xx status code
func (o *PutBikesIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put bikes Id unauthorized response has a 5xx status code
func (o *PutBikesIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put bikes Id unauthorized response a status code equal to that given
func (o *PutBikesIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put bikes Id unauthorized response
func (o *PutBikesIDUnauthorized) Code() int {
	return 401
}

func (o *PutBikesIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdUnauthorized %s", 401, payload)
}

func (o *PutBikesIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdUnauthorized %s", 401, payload)
}

func (o *PutBikesIDUnauthorized) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PutBikesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutBikesIDForbidden creates a PutBikesIDForbidden with default headers values
func NewPutBikesIDForbidden() *PutBikesIDForbidden {
	return &PutBikesIDForbidden{}
}

/*
PutBikesIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type PutBikesIDForbidden struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this put bikes Id forbidden response has a 2xx status code
func (o *PutBikesIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put bikes Id forbidden response has a 3xx status code
func (o *PutBikesIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put bikes Id forbidden response has a 4xx status code
func (o *PutBikesIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put bikes Id forbidden response has a 5xx status code
func (o *PutBikesIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put bikes Id forbidden response a status code equal to that given
func (o *PutBikesIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put bikes Id forbidden response
func (o *PutBikesIDForbidden) Code() int {
	return 403
}

func (o *PutBikesIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdForbidden %s", 403, payload)
}

func (o *PutBikesIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /bikes/{id}][%d] putBikesIdForbidden %s", 403, payload)
}

func (o *PutBikesIDForbidden) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *PutBikesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
PutBikesIDOKBody put bikes ID o k body
swagger:model PutBikesIDOKBody
*/
type PutBikesIDOKBody struct {
	models.InternalAdapterHandlerHTTPSuccessResponse

	// data
	Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainBike `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBikesIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutBikesIDOKBodyAO0
	var putBikesIDOKBodyAO0 models.InternalAdapterHandlerHTTPSuccessResponse
	if err := swag.ReadJSON(raw, &putBikesIDOKBodyAO0); err != nil {
		return err
	}
	o.InternalAdapterHandlerHTTPSuccessResponse = putBikesIDOKBodyAO0

	// PutBikesIDOKBodyAO1
	var dataPutBikesIDOKBodyAO1 struct {
		Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainBike `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutBikesIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutBikesIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBikesIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putBikesIDOKBodyAO0, err := swag.WriteJSON(o.InternalAdapterHandlerHTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBikesIDOKBodyAO0)
	var dataPutBikesIDOKBodyAO1 struct {
		Data *models.WebikeBikeMicroserviceNikitaInternalCoreDomainBike `json:"data,omitempty"`
	}

	dataPutBikesIDOKBodyAO1.Data = o.Data

	jsonDataPutBikesIDOKBodyAO1, errPutBikesIDOKBodyAO1 := swag.WriteJSON(dataPutBikesIDOKBodyAO1)
	if errPutBikesIDOKBodyAO1 != nil {
		return nil, errPutBikesIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutBikesIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put bikes ID o k body
func (o *PutBikesIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutBikesIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("putBikesIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("putBikesIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this put bikes ID o k body based on the context it is used
func (o *PutBikesIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutBikesIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("putBikesIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("putBikesIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutBikesIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBikesIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutBikesIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
