// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"webike_bike_microservice_nikita/models"
)

// GetBikesIDWithUserReader is a Reader for the GetBikesIDWithUser structure.
type GetBikesIDWithUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBikesIDWithUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetBikesIDWithUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBikesIDWithUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBikesIDWithUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /bikes/{id}/with-user] GetBikesIDWithUser", response, response.Code())
	}
}

// NewGetBikesIDWithUserOK creates a GetBikesIDWithUserOK with default headers values
func NewGetBikesIDWithUserOK() *GetBikesIDWithUserOK {
	return &GetBikesIDWithUserOK{}
}

/*
GetBikesIDWithUserOK describes a response with status code 200, with default header values.

Байк с пользователем
*/
type GetBikesIDWithUserOK struct {
	Payload *GetBikesIDWithUserOKBody
}

// IsSuccess returns true when this get bikes Id with user o k response has a 2xx status code
func (o *GetBikesIDWithUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bikes Id with user o k response has a 3xx status code
func (o *GetBikesIDWithUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with user o k response has a 4xx status code
func (o *GetBikesIDWithUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bikes Id with user o k response has a 5xx status code
func (o *GetBikesIDWithUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with user o k response a status code equal to that given
func (o *GetBikesIDWithUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bikes Id with user o k response
func (o *GetBikesIDWithUserOK) Code() int {
	return 200
}

func (o *GetBikesIDWithUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-user][%d] getBikesIdWithUserOK %s", 200, payload)
}

func (o *GetBikesIDWithUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-user][%d] getBikesIdWithUserOK %s", 200, payload)
}

func (o *GetBikesIDWithUserOK) GetPayload() *GetBikesIDWithUserOKBody {
	return o.Payload
}

func (o *GetBikesIDWithUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBikesIDWithUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithUserUnauthorized creates a GetBikesIDWithUserUnauthorized with default headers values
func NewGetBikesIDWithUserUnauthorized() *GetBikesIDWithUserUnauthorized {
	return &GetBikesIDWithUserUnauthorized{}
}

/*
GetBikesIDWithUserUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetBikesIDWithUserUnauthorized struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with user unauthorized response has a 2xx status code
func (o *GetBikesIDWithUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with user unauthorized response has a 3xx status code
func (o *GetBikesIDWithUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with user unauthorized response has a 4xx status code
func (o *GetBikesIDWithUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with user unauthorized response has a 5xx status code
func (o *GetBikesIDWithUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with user unauthorized response a status code equal to that given
func (o *GetBikesIDWithUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get bikes Id with user unauthorized response
func (o *GetBikesIDWithUserUnauthorized) Code() int {
	return 401
}

func (o *GetBikesIDWithUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-user][%d] getBikesIdWithUserUnauthorized %s", 401, payload)
}

func (o *GetBikesIDWithUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-user][%d] getBikesIdWithUserUnauthorized %s", 401, payload)
}

func (o *GetBikesIDWithUserUnauthorized) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithUserNotFound creates a GetBikesIDWithUserNotFound with default headers values
func NewGetBikesIDWithUserNotFound() *GetBikesIDWithUserNotFound {
	return &GetBikesIDWithUserNotFound{}
}

/*
GetBikesIDWithUserNotFound describes a response with status code 404, with default header values.

Байк не найден
*/
type GetBikesIDWithUserNotFound struct {
	Payload *models.InternalAdapterHandlerHTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with user not found response has a 2xx status code
func (o *GetBikesIDWithUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with user not found response has a 3xx status code
func (o *GetBikesIDWithUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with user not found response has a 4xx status code
func (o *GetBikesIDWithUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with user not found response has a 5xx status code
func (o *GetBikesIDWithUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with user not found response a status code equal to that given
func (o *GetBikesIDWithUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get bikes Id with user not found response
func (o *GetBikesIDWithUserNotFound) Code() int {
	return 404
}

func (o *GetBikesIDWithUserNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-user][%d] getBikesIdWithUserNotFound %s", 404, payload)
}

func (o *GetBikesIDWithUserNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-user][%d] getBikesIdWithUserNotFound %s", 404, payload)
}

func (o *GetBikesIDWithUserNotFound) GetPayload() *models.InternalAdapterHandlerHTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalAdapterHandlerHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetBikesIDWithUserOKBody get bikes ID with user o k body
swagger:model GetBikesIDWithUserOKBody
*/
type GetBikesIDWithUserOKBody struct {
	models.InternalAdapterHandlerHTTPSuccessResponse

	// data
	Data *models.InternalAdapterHandlerHTTPBikeWithUserResponse `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBikesIDWithUserOKBody) UnmarshalJSON(raw []byte) error {
	// GetBikesIDWithUserOKBodyAO0
	var getBikesIDWithUserOKBodyAO0 models.InternalAdapterHandlerHTTPSuccessResponse
	if err := swag.ReadJSON(raw, &getBikesIDWithUserOKBodyAO0); err != nil {
		return err
	}
	o.InternalAdapterHandlerHTTPSuccessResponse = getBikesIDWithUserOKBodyAO0

	// GetBikesIDWithUserOKBodyAO1
	var dataGetBikesIDWithUserOKBodyAO1 struct {
		Data *models.InternalAdapterHandlerHTTPBikeWithUserResponse `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetBikesIDWithUserOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBikesIDWithUserOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBikesIDWithUserOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBikesIDWithUserOKBodyAO0, err := swag.WriteJSON(o.InternalAdapterHandlerHTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBikesIDWithUserOKBodyAO0)
	var dataGetBikesIDWithUserOKBodyAO1 struct {
		Data *models.InternalAdapterHandlerHTTPBikeWithUserResponse `json:"data,omitempty"`
	}

	dataGetBikesIDWithUserOKBodyAO1.Data = o.Data

	jsonDataGetBikesIDWithUserOKBodyAO1, errGetBikesIDWithUserOKBodyAO1 := swag.WriteJSON(dataGetBikesIDWithUserOKBodyAO1)
	if errGetBikesIDWithUserOKBodyAO1 != nil {
		return nil, errGetBikesIDWithUserOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetBikesIDWithUserOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get bikes ID with user o k body
func (o *GetBikesIDWithUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBikesIDWithUserOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("getBikesIdWithUserOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("getBikesIdWithUserOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this get bikes ID with user o k body based on the context it is used
func (o *GetBikesIDWithUserOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InternalAdapterHandlerHTTPSuccessResponse
	if err := o.InternalAdapterHandlerHTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBikesIDWithUserOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("getBikesIdWithUserOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("getBikesIdWithUserOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBikesIDWithUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBikesIDWithUserOKBody) UnmarshalBinary(b []byte) error {
	var res GetBikesIDWithUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
