// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// DeleteBikesIDReader is a Reader for the DeleteBikesID structure.
type DeleteBikesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBikesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteBikesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteBikesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteBikesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /bikes/{id}] DeleteBikesID", response, response.Code())
	}
}

// NewDeleteBikesIDOK creates a DeleteBikesIDOK with default headers values
func NewDeleteBikesIDOK() *DeleteBikesIDOK {
	return &DeleteBikesIDOK{}
}

/*
DeleteBikesIDOK describes a response with status code 200, with default header values.

Байк удален
*/
type DeleteBikesIDOK struct {
	Payload *models.HTTPDeleteBikeResponse
}

// IsSuccess returns true when this delete bikes Id o k response has a 2xx status code
func (o *DeleteBikesIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete bikes Id o k response has a 3xx status code
func (o *DeleteBikesIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bikes Id o k response has a 4xx status code
func (o *DeleteBikesIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete bikes Id o k response has a 5xx status code
func (o *DeleteBikesIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bikes Id o k response a status code equal to that given
func (o *DeleteBikesIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete bikes Id o k response
func (o *DeleteBikesIDOK) Code() int {
	return 200
}

func (o *DeleteBikesIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /bikes/{id}][%d] deleteBikesIdOK %s", 200, payload)
}

func (o *DeleteBikesIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /bikes/{id}][%d] deleteBikesIdOK %s", 200, payload)
}

func (o *DeleteBikesIDOK) GetPayload() *models.HTTPDeleteBikeResponse {
	return o.Payload
}

func (o *DeleteBikesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPDeleteBikeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteBikesIDUnauthorized creates a DeleteBikesIDUnauthorized with default headers values
func NewDeleteBikesIDUnauthorized() *DeleteBikesIDUnauthorized {
	return &DeleteBikesIDUnauthorized{}
}

/*
DeleteBikesIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type DeleteBikesIDUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this delete bikes Id unauthorized response has a 2xx status code
func (o *DeleteBikesIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bikes Id unauthorized response has a 3xx status code
func (o *DeleteBikesIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bikes Id unauthorized response has a 4xx status code
func (o *DeleteBikesIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete bikes Id unauthorized response has a 5xx status code
func (o *DeleteBikesIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bikes Id unauthorized response a status code equal to that given
func (o *DeleteBikesIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete bikes Id unauthorized response
func (o *DeleteBikesIDUnauthorized) Code() int {
	return 401
}

func (o *DeleteBikesIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /bikes/{id}][%d] deleteBikesIdUnauthorized %s", 401, payload)
}

func (o *DeleteBikesIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /bikes/{id}][%d] deleteBikesIdUnauthorized %s", 401, payload)
}

func (o *DeleteBikesIDUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *DeleteBikesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteBikesIDForbidden creates a DeleteBikesIDForbidden with default headers values
func NewDeleteBikesIDForbidden() *DeleteBikesIDForbidden {
	return &DeleteBikesIDForbidden{}
}

/*
DeleteBikesIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type DeleteBikesIDForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this delete bikes Id forbidden response has a 2xx status code
func (o *DeleteBikesIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete bikes Id forbidden response has a 3xx status code
func (o *DeleteBikesIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete bikes Id forbidden response has a 4xx status code
func (o *DeleteBikesIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete bikes Id forbidden response has a 5xx status code
func (o *DeleteBikesIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete bikes Id forbidden response a status code equal to that given
func (o *DeleteBikesIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete bikes Id forbidden response
func (o *DeleteBikesIDForbidden) Code() int {
	return 403
}

func (o *DeleteBikesIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /bikes/{id}][%d] deleteBikesIdForbidden %s", 403, payload)
}

func (o *DeleteBikesIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /bikes/{id}][%d] deleteBikesIdForbidden %s", 403, payload)
}

func (o *DeleteBikesIDForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *DeleteBikesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
