// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// GetBikesIDWithComponentsReader is a Reader for the GetBikesIDWithComponents structure.
type GetBikesIDWithComponentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBikesIDWithComponentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetBikesIDWithComponentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBikesIDWithComponentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBikesIDWithComponentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBikesIDWithComponentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /bikes/{id}/with-components] GetBikesIDWithComponents", response, response.Code())
	}
}

// NewGetBikesIDWithComponentsOK creates a GetBikesIDWithComponentsOK with default headers values
func NewGetBikesIDWithComponentsOK() *GetBikesIDWithComponentsOK {
	return &GetBikesIDWithComponentsOK{}
}

/*
GetBikesIDWithComponentsOK describes a response with status code 200, with default header values.

Байк с компонентами
*/
type GetBikesIDWithComponentsOK struct {
	Payload *models.HTTPSuccessResponse
}

// IsSuccess returns true when this get bikes Id with components o k response has a 2xx status code
func (o *GetBikesIDWithComponentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bikes Id with components o k response has a 3xx status code
func (o *GetBikesIDWithComponentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components o k response has a 4xx status code
func (o *GetBikesIDWithComponentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bikes Id with components o k response has a 5xx status code
func (o *GetBikesIDWithComponentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components o k response a status code equal to that given
func (o *GetBikesIDWithComponentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bikes Id with components o k response
func (o *GetBikesIDWithComponentsOK) Code() int {
	return 200
}

func (o *GetBikesIDWithComponentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsOK %s", 200, payload)
}

func (o *GetBikesIDWithComponentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsOK %s", 200, payload)
}

func (o *GetBikesIDWithComponentsOK) GetPayload() *models.HTTPSuccessResponse {
	return o.Payload
}

func (o *GetBikesIDWithComponentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithComponentsUnauthorized creates a GetBikesIDWithComponentsUnauthorized with default headers values
func NewGetBikesIDWithComponentsUnauthorized() *GetBikesIDWithComponentsUnauthorized {
	return &GetBikesIDWithComponentsUnauthorized{}
}

/*
GetBikesIDWithComponentsUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetBikesIDWithComponentsUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with components unauthorized response has a 2xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with components unauthorized response has a 3xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components unauthorized response has a 4xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with components unauthorized response has a 5xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components unauthorized response a status code equal to that given
func (o *GetBikesIDWithComponentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get bikes Id with components unauthorized response
func (o *GetBikesIDWithComponentsUnauthorized) Code() int {
	return 401
}

func (o *GetBikesIDWithComponentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsUnauthorized %s", 401, payload)
}

func (o *GetBikesIDWithComponentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsUnauthorized %s", 401, payload)
}

func (o *GetBikesIDWithComponentsUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithComponentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithComponentsForbidden creates a GetBikesIDWithComponentsForbidden with default headers values
func NewGetBikesIDWithComponentsForbidden() *GetBikesIDWithComponentsForbidden {
	return &GetBikesIDWithComponentsForbidden{}
}

/*
GetBikesIDWithComponentsForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type GetBikesIDWithComponentsForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with components forbidden response has a 2xx status code
func (o *GetBikesIDWithComponentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with components forbidden response has a 3xx status code
func (o *GetBikesIDWithComponentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components forbidden response has a 4xx status code
func (o *GetBikesIDWithComponentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with components forbidden response has a 5xx status code
func (o *GetBikesIDWithComponentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components forbidden response a status code equal to that given
func (o *GetBikesIDWithComponentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get bikes Id with components forbidden response
func (o *GetBikesIDWithComponentsForbidden) Code() int {
	return 403
}

func (o *GetBikesIDWithComponentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsForbidden %s", 403, payload)
}

func (o *GetBikesIDWithComponentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsForbidden %s", 403, payload)
}

func (o *GetBikesIDWithComponentsForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithComponentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithComponentsNotFound creates a GetBikesIDWithComponentsNotFound with default headers values
func NewGetBikesIDWithComponentsNotFound() *GetBikesIDWithComponentsNotFound {
	return &GetBikesIDWithComponentsNotFound{}
}

/*
GetBikesIDWithComponentsNotFound describes a response with status code 404, with default header values.

Байк не найден
*/
type GetBikesIDWithComponentsNotFound struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with components not found response has a 2xx status code
func (o *GetBikesIDWithComponentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with components not found response has a 3xx status code
func (o *GetBikesIDWithComponentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components not found response has a 4xx status code
func (o *GetBikesIDWithComponentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with components not found response has a 5xx status code
func (o *GetBikesIDWithComponentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components not found response a status code equal to that given
func (o *GetBikesIDWithComponentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get bikes Id with components not found response
func (o *GetBikesIDWithComponentsNotFound) Code() int {
	return 404
}

func (o *GetBikesIDWithComponentsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsNotFound %s", 404, payload)
}

func (o *GetBikesIDWithComponentsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsNotFound %s", 404, payload)
}

func (o *GetBikesIDWithComponentsNotFound) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithComponentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
