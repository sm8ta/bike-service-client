// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// GetBikesIDWithComponentsReader is a Reader for the GetBikesIDWithComponents structure.
type GetBikesIDWithComponentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBikesIDWithComponentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetBikesIDWithComponentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBikesIDWithComponentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBikesIDWithComponentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /bikes/{id}/with-components] GetBikesIDWithComponents", response, response.Code())
	}
}

// NewGetBikesIDWithComponentsOK creates a GetBikesIDWithComponentsOK with default headers values
func NewGetBikesIDWithComponentsOK() *GetBikesIDWithComponentsOK {
	return &GetBikesIDWithComponentsOK{}
}

/*
GetBikesIDWithComponentsOK describes a response with status code 200, with default header values.

Байк с компонентами
*/
type GetBikesIDWithComponentsOK struct {
	Payload *GetBikesIDWithComponentsOKBody
}

// IsSuccess returns true when this get bikes Id with components o k response has a 2xx status code
func (o *GetBikesIDWithComponentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bikes Id with components o k response has a 3xx status code
func (o *GetBikesIDWithComponentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components o k response has a 4xx status code
func (o *GetBikesIDWithComponentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bikes Id with components o k response has a 5xx status code
func (o *GetBikesIDWithComponentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components o k response a status code equal to that given
func (o *GetBikesIDWithComponentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bikes Id with components o k response
func (o *GetBikesIDWithComponentsOK) Code() int {
	return 200
}

func (o *GetBikesIDWithComponentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsOK %s", 200, payload)
}

func (o *GetBikesIDWithComponentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsOK %s", 200, payload)
}

func (o *GetBikesIDWithComponentsOK) GetPayload() *GetBikesIDWithComponentsOKBody {
	return o.Payload
}

func (o *GetBikesIDWithComponentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBikesIDWithComponentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithComponentsUnauthorized creates a GetBikesIDWithComponentsUnauthorized with default headers values
func NewGetBikesIDWithComponentsUnauthorized() *GetBikesIDWithComponentsUnauthorized {
	return &GetBikesIDWithComponentsUnauthorized{}
}

/*
GetBikesIDWithComponentsUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetBikesIDWithComponentsUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with components unauthorized response has a 2xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with components unauthorized response has a 3xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components unauthorized response has a 4xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with components unauthorized response has a 5xx status code
func (o *GetBikesIDWithComponentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components unauthorized response a status code equal to that given
func (o *GetBikesIDWithComponentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get bikes Id with components unauthorized response
func (o *GetBikesIDWithComponentsUnauthorized) Code() int {
	return 401
}

func (o *GetBikesIDWithComponentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsUnauthorized %s", 401, payload)
}

func (o *GetBikesIDWithComponentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsUnauthorized %s", 401, payload)
}

func (o *GetBikesIDWithComponentsUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithComponentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesIDWithComponentsNotFound creates a GetBikesIDWithComponentsNotFound with default headers values
func NewGetBikesIDWithComponentsNotFound() *GetBikesIDWithComponentsNotFound {
	return &GetBikesIDWithComponentsNotFound{}
}

/*
GetBikesIDWithComponentsNotFound describes a response with status code 404, with default header values.

Байк не найден
*/
type GetBikesIDWithComponentsNotFound struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes Id with components not found response has a 2xx status code
func (o *GetBikesIDWithComponentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes Id with components not found response has a 3xx status code
func (o *GetBikesIDWithComponentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes Id with components not found response has a 4xx status code
func (o *GetBikesIDWithComponentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes Id with components not found response has a 5xx status code
func (o *GetBikesIDWithComponentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes Id with components not found response a status code equal to that given
func (o *GetBikesIDWithComponentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get bikes Id with components not found response
func (o *GetBikesIDWithComponentsNotFound) Code() int {
	return 404
}

func (o *GetBikesIDWithComponentsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsNotFound %s", 404, payload)
}

func (o *GetBikesIDWithComponentsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/{id}/with-components][%d] getBikesIdWithComponentsNotFound %s", 404, payload)
}

func (o *GetBikesIDWithComponentsNotFound) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesIDWithComponentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetBikesIDWithComponentsOKBody get bikes ID with components o k body
swagger:model GetBikesIDWithComponentsOKBody
*/
type GetBikesIDWithComponentsOKBody struct {
	models.HTTPSuccessResponse

	// data
	Data *models.DomainBike `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBikesIDWithComponentsOKBody) UnmarshalJSON(raw []byte) error {
	// GetBikesIDWithComponentsOKBodyAO0
	var getBikesIDWithComponentsOKBodyAO0 models.HTTPSuccessResponse
	if err := swag.ReadJSON(raw, &getBikesIDWithComponentsOKBodyAO0); err != nil {
		return err
	}
	o.HTTPSuccessResponse = getBikesIDWithComponentsOKBodyAO0

	// GetBikesIDWithComponentsOKBodyAO1
	var dataGetBikesIDWithComponentsOKBodyAO1 struct {
		Data *models.DomainBike `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetBikesIDWithComponentsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBikesIDWithComponentsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBikesIDWithComponentsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBikesIDWithComponentsOKBodyAO0, err := swag.WriteJSON(o.HTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBikesIDWithComponentsOKBodyAO0)
	var dataGetBikesIDWithComponentsOKBodyAO1 struct {
		Data *models.DomainBike `json:"data,omitempty"`
	}

	dataGetBikesIDWithComponentsOKBodyAO1.Data = o.Data

	jsonDataGetBikesIDWithComponentsOKBodyAO1, errGetBikesIDWithComponentsOKBodyAO1 := swag.WriteJSON(dataGetBikesIDWithComponentsOKBodyAO1)
	if errGetBikesIDWithComponentsOKBodyAO1 != nil {
		return nil, errGetBikesIDWithComponentsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetBikesIDWithComponentsOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get bikes ID with components o k body
func (o *GetBikesIDWithComponentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBikesIDWithComponentsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("getBikesIdWithComponentsOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("getBikesIdWithComponentsOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this get bikes ID with components o k body based on the context it is used
func (o *GetBikesIDWithComponentsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBikesIDWithComponentsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("getBikesIdWithComponentsOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("getBikesIdWithComponentsOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBikesIDWithComponentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBikesIDWithComponentsOKBody) UnmarshalBinary(b []byte) error {
	var res GetBikesIDWithComponentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
