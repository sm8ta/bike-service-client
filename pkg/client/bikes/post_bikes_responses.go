// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// PostBikesReader is a Reader for the PostBikes structure.
type PostBikesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostBikesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewPostBikesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostBikesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostBikesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /bikes] PostBikes", response, response.Code())
	}
}

// NewPostBikesCreated creates a PostBikesCreated with default headers values
func NewPostBikesCreated() *PostBikesCreated {
	return &PostBikesCreated{}
}

/*
PostBikesCreated describes a response with status code 201, with default header values.

Байк создан
*/
type PostBikesCreated struct {
	Payload *PostBikesCreatedBody
}

// IsSuccess returns true when this post bikes created response has a 2xx status code
func (o *PostBikesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post bikes created response has a 3xx status code
func (o *PostBikesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post bikes created response has a 4xx status code
func (o *PostBikesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post bikes created response has a 5xx status code
func (o *PostBikesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post bikes created response a status code equal to that given
func (o *PostBikesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post bikes created response
func (o *PostBikesCreated) Code() int {
	return 201
}

func (o *PostBikesCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bikes][%d] postBikesCreated %s", 201, payload)
}

func (o *PostBikesCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bikes][%d] postBikesCreated %s", 201, payload)
}

func (o *PostBikesCreated) GetPayload() *PostBikesCreatedBody {
	return o.Payload
}

func (o *PostBikesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBikesCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostBikesBadRequest creates a PostBikesBadRequest with default headers values
func NewPostBikesBadRequest() *PostBikesBadRequest {
	return &PostBikesBadRequest{}
}

/*
PostBikesBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PostBikesBadRequest struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post bikes bad request response has a 2xx status code
func (o *PostBikesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post bikes bad request response has a 3xx status code
func (o *PostBikesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post bikes bad request response has a 4xx status code
func (o *PostBikesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post bikes bad request response has a 5xx status code
func (o *PostBikesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post bikes bad request response a status code equal to that given
func (o *PostBikesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post bikes bad request response
func (o *PostBikesBadRequest) Code() int {
	return 400
}

func (o *PostBikesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bikes][%d] postBikesBadRequest %s", 400, payload)
}

func (o *PostBikesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bikes][%d] postBikesBadRequest %s", 400, payload)
}

func (o *PostBikesBadRequest) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostBikesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostBikesUnauthorized creates a PostBikesUnauthorized with default headers values
func NewPostBikesUnauthorized() *PostBikesUnauthorized {
	return &PostBikesUnauthorized{}
}

/*
PostBikesUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PostBikesUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post bikes unauthorized response has a 2xx status code
func (o *PostBikesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post bikes unauthorized response has a 3xx status code
func (o *PostBikesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post bikes unauthorized response has a 4xx status code
func (o *PostBikesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post bikes unauthorized response has a 5xx status code
func (o *PostBikesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post bikes unauthorized response a status code equal to that given
func (o *PostBikesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post bikes unauthorized response
func (o *PostBikesUnauthorized) Code() int {
	return 401
}

func (o *PostBikesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bikes][%d] postBikesUnauthorized %s", 401, payload)
}

func (o *PostBikesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /bikes][%d] postBikesUnauthorized %s", 401, payload)
}

func (o *PostBikesUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostBikesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
PostBikesCreatedBody post bikes created body
swagger:model PostBikesCreatedBody
*/
type PostBikesCreatedBody struct {
	models.HTTPSuccessResponse

	// data
	Data *models.DomainBike `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostBikesCreatedBody) UnmarshalJSON(raw []byte) error {
	// PostBikesCreatedBodyAO0
	var postBikesCreatedBodyAO0 models.HTTPSuccessResponse
	if err := swag.ReadJSON(raw, &postBikesCreatedBodyAO0); err != nil {
		return err
	}
	o.HTTPSuccessResponse = postBikesCreatedBodyAO0

	// PostBikesCreatedBodyAO1
	var dataPostBikesCreatedBodyAO1 struct {
		Data *models.DomainBike `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostBikesCreatedBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostBikesCreatedBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostBikesCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postBikesCreatedBodyAO0, err := swag.WriteJSON(o.HTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBikesCreatedBodyAO0)
	var dataPostBikesCreatedBodyAO1 struct {
		Data *models.DomainBike `json:"data,omitempty"`
	}

	dataPostBikesCreatedBodyAO1.Data = o.Data

	jsonDataPostBikesCreatedBodyAO1, errPostBikesCreatedBodyAO1 := swag.WriteJSON(dataPostBikesCreatedBodyAO1)
	if errPostBikesCreatedBodyAO1 != nil {
		return nil, errPostBikesCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataPostBikesCreatedBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post bikes created body
func (o *PostBikesCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBikesCreatedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("postBikesCreated" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("postBikesCreated" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this post bikes created body based on the context it is used
func (o *PostBikesCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBikesCreatedBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("postBikesCreated" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("postBikesCreated" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBikesCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBikesCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostBikesCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
