// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_bike_microservice_nikita/models"
)

// GetBikesMyReader is a Reader for the GetBikesMy structure.
type GetBikesMyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBikesMyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetBikesMyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBikesMyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBikesMyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /bikes/my] GetBikesMy", response, response.Code())
	}
}

// NewGetBikesMyOK creates a GetBikesMyOK with default headers values
func NewGetBikesMyOK() *GetBikesMyOK {
	return &GetBikesMyOK{}
}

/*
GetBikesMyOK describes a response with status code 200, with default header values.

Список байков пользователя
*/
type GetBikesMyOK struct {
	Payload *GetBikesMyOKBody
}

// IsSuccess returns true when this get bikes my o k response has a 2xx status code
func (o *GetBikesMyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bikes my o k response has a 3xx status code
func (o *GetBikesMyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes my o k response has a 4xx status code
func (o *GetBikesMyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bikes my o k response has a 5xx status code
func (o *GetBikesMyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes my o k response a status code equal to that given
func (o *GetBikesMyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bikes my o k response
func (o *GetBikesMyOK) Code() int {
	return 200
}

func (o *GetBikesMyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/my][%d] getBikesMyOK %s", 200, payload)
}

func (o *GetBikesMyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/my][%d] getBikesMyOK %s", 200, payload)
}

func (o *GetBikesMyOK) GetPayload() *GetBikesMyOKBody {
	return o.Payload
}

func (o *GetBikesMyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBikesMyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesMyUnauthorized creates a GetBikesMyUnauthorized with default headers values
func NewGetBikesMyUnauthorized() *GetBikesMyUnauthorized {
	return &GetBikesMyUnauthorized{}
}

/*
GetBikesMyUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetBikesMyUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes my unauthorized response has a 2xx status code
func (o *GetBikesMyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes my unauthorized response has a 3xx status code
func (o *GetBikesMyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes my unauthorized response has a 4xx status code
func (o *GetBikesMyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bikes my unauthorized response has a 5xx status code
func (o *GetBikesMyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get bikes my unauthorized response a status code equal to that given
func (o *GetBikesMyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get bikes my unauthorized response
func (o *GetBikesMyUnauthorized) Code() int {
	return 401
}

func (o *GetBikesMyUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/my][%d] getBikesMyUnauthorized %s", 401, payload)
}

func (o *GetBikesMyUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/my][%d] getBikesMyUnauthorized %s", 401, payload)
}

func (o *GetBikesMyUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesMyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBikesMyInternalServerError creates a GetBikesMyInternalServerError with default headers values
func NewGetBikesMyInternalServerError() *GetBikesMyInternalServerError {
	return &GetBikesMyInternalServerError{}
}

/*
GetBikesMyInternalServerError describes a response with status code 500, with default header values.

Внутренняя ошибка сервера
*/
type GetBikesMyInternalServerError struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get bikes my internal server error response has a 2xx status code
func (o *GetBikesMyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bikes my internal server error response has a 3xx status code
func (o *GetBikesMyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bikes my internal server error response has a 4xx status code
func (o *GetBikesMyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bikes my internal server error response has a 5xx status code
func (o *GetBikesMyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get bikes my internal server error response a status code equal to that given
func (o *GetBikesMyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get bikes my internal server error response
func (o *GetBikesMyInternalServerError) Code() int {
	return 500
}

func (o *GetBikesMyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/my][%d] getBikesMyInternalServerError %s", 500, payload)
}

func (o *GetBikesMyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /bikes/my][%d] getBikesMyInternalServerError %s", 500, payload)
}

func (o *GetBikesMyInternalServerError) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetBikesMyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetBikesMyOKBody get bikes my o k body
swagger:model GetBikesMyOKBody
*/
type GetBikesMyOKBody struct {
	models.HTTPSuccessResponse

	// data
	Data []*models.DomainBike `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBikesMyOKBody) UnmarshalJSON(raw []byte) error {
	// GetBikesMyOKBodyAO0
	var getBikesMyOKBodyAO0 models.HTTPSuccessResponse
	if err := swag.ReadJSON(raw, &getBikesMyOKBodyAO0); err != nil {
		return err
	}
	o.HTTPSuccessResponse = getBikesMyOKBodyAO0

	// GetBikesMyOKBodyAO1
	var dataGetBikesMyOKBodyAO1 struct {
		Data []*models.DomainBike `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetBikesMyOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBikesMyOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBikesMyOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBikesMyOKBodyAO0, err := swag.WriteJSON(o.HTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBikesMyOKBodyAO0)
	var dataGetBikesMyOKBodyAO1 struct {
		Data []*models.DomainBike `json:"data"`
	}

	dataGetBikesMyOKBodyAO1.Data = o.Data

	jsonDataGetBikesMyOKBodyAO1, errGetBikesMyOKBodyAO1 := swag.WriteJSON(dataGetBikesMyOKBodyAO1)
	if errGetBikesMyOKBodyAO1 != nil {
		return nil, errGetBikesMyOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetBikesMyOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get bikes my o k body
func (o *GetBikesMyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBikesMyOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getBikesMyOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getBikesMyOK" + "." + "data" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get bikes my o k body based on the context it is used
func (o *GetBikesMyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBikesMyOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getBikesMyOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getBikesMyOK" + "." + "data" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBikesMyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBikesMyOKBody) UnmarshalBinary(b []byte) error {
	var res GetBikesMyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
