basePath: /
definitions:
  http.BikeRequest:
    properties:
      mileage:
        example: 1500
        type: integer
      model:
        example: Mountain Bike Pro
        type: string
      type:
        example: mountain
        type: string
    required:
    - mileage
    - model
    - type
    type: object
  http.ComponentRequest:
    properties:
      bike_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      brand:
        example: Shimano
        type: string
      installed_mileage:
        example: 1000
        type: integer
      max_mileage:
        example: 5000
        type: integer
      model:
        example: Deore XT
        type: string
      name:
        example: handlebars
        type: string
    required:
    - bike_id
    - installed_mileage
    - max_mileage
    - name
    type: object
  http.UpdateBike:
    properties:
      mileage:
        example: 2000
        type: integer
      model:
        example: New Model
        type: string
      type:
        example: mountain
        type: string
    type: object
  http.UpdateComponent:
    properties:
      brand:
        example: Shimano
        type: string
      installed_mileage:
        example: 1000
        type: integer
      max_mileage:
        example: 5000
        type: integer
      model:
        example: XT
        type: string
      name:
        example: handlebars
        type: string
    type: object
  http.errorResponse:
    properties:
      message:
        example: Error
        type: string
      success:
        example: false
        type: boolean
    type: object
  http.successResponse:
    properties:
      data:
        type: object
      message:
        example: Success message
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:8081
info:
  contact: {}
  description: API для управления байками
  title: Bike Microservice API
  version: "1.0"
paths:
  /bikes:
    post:
      consumes:
      - application/json
      description: Создание нового байка
      parameters:
      - description: Данные байка
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.BikeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Байк создан
          schema:
            $ref: '#/definitions/http.successResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Создать байк
      tags:
      - bikes
  /bikes/{id}:
    delete:
      description: Удаление байка
      parameters:
      - description: ID байка
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Байк удален
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Удалить байк
      tags:
      - bikes
    get:
      description: Получение информации о байке по ID
      parameters:
      - description: ID байка
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Байк найден
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Байк не найден
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Получить байк
      tags:
      - bikes
    put:
      description: Обновление данных байка
      parameters:
      - description: ID байка
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateBike'
      responses:
        "200":
          description: Байк обновлен
          schema:
            $ref: '#/definitions/http.successResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Обновить байк
      tags:
      - bikes
  /bikes/{id}/with-components:
    get:
      description: Получение байка со всеми компонентами
      parameters:
      - description: ID байка
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Байк с компонентами
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Байк не найден
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Получить байк с компонентами
      tags:
      - bikes
  /bikes/{id}/with-user:
    get:
      description: Получение информации о байке и его владельце
      parameters:
      - description: ID байка
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Байк с пользователем
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Байк не найден
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Получить байк с пользователем
      tags:
      - bikes
  /bikes/my:
    get:
      description: Получение всех байков пользователя
      responses:
        "200":
          description: Байки найдены
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Получить байки пользователя
      tags:
      - bikes
  /components:
    post:
      consumes:
      - application/json
      description: Добавление компонента к байку
      parameters:
      - description: Данные компонента
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.ComponentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Компонент создан
          schema:
            $ref: '#/definitions/http.successResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Создать компонент
      tags:
      - components
  /components/{id}:
    delete:
      description: Удаление компонента
      parameters:
      - description: ID компонента
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Компонент удален
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Удалить компонент
      tags:
      - components
    get:
      description: Получение информации о компоненте по ID
      parameters:
      - description: ID компонента
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Компонент найден
          schema:
            $ref: '#/definitions/http.successResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Компонент не найден
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Получить компонент
      tags:
      - components
    put:
      description: Обновление данных компонента
      parameters:
      - description: ID компонента
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateComponent'
      responses:
        "200":
          description: Компонент обновлен
          schema:
            $ref: '#/definitions/http.successResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Обновить компонент
      tags:
      - components
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
