// Code generated by go-swagger; DO NOT EDIT.

package bikes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new bikes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new bikes API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new bikes API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for bikes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteBikesID(params *DeleteBikesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBikesIDOK, error)

	GetBikesID(params *GetBikesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesIDOK, error)

	GetBikesIDWithComponents(params *GetBikesIDWithComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesIDWithComponentsOK, error)

	GetBikesIDWithUser(params *GetBikesIDWithUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesIDWithUserOK, error)

	GetBikesMy(params *GetBikesMyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesMyOK, error)

	PostBikes(params *PostBikesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostBikesCreated, error)

	PutBikesID(params *PutBikesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutBikesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteBikesID удалитьs байк

Удаление байка
*/
func (a *Client) DeleteBikesID(params *DeleteBikesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBikesIDOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteBikesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBikesID",
		Method:             "DELETE",
		PathPattern:        "/bikes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBikesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteBikesIDOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBikesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBikesID получитьs байк

Получение информации о байке по ID
*/
func (a *Client) GetBikesID(params *GetBikesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesIDOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBikesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBikesID",
		Method:             "GET",
		PathPattern:        "/bikes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBikesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBikesIDOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBikesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBikesIDWithComponents получитьs байк с компонентами

Получение байка со всеми компонентами
*/
func (a *Client) GetBikesIDWithComponents(params *GetBikesIDWithComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesIDWithComponentsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBikesIDWithComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBikesIDWithComponents",
		Method:             "GET",
		PathPattern:        "/bikes/{id}/with-components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBikesIDWithComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBikesIDWithComponentsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBikesIDWithComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBikesIDWithUser получитьs байк с пользователем

Получение информации о байке и его владельце
*/
func (a *Client) GetBikesIDWithUser(params *GetBikesIDWithUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesIDWithUserOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBikesIDWithUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBikesIDWithUser",
		Method:             "GET",
		PathPattern:        "/bikes/{id}/with-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBikesIDWithUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBikesIDWithUserOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBikesIDWithUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBikesMy получитьs байки пользователя по айди пользователя

Получение всех байков авторизованного пользователя
*/
func (a *Client) GetBikesMy(params *GetBikesMyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBikesMyOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBikesMyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBikesMy",
		Method:             "GET",
		PathPattern:        "/bikes/my",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBikesMyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBikesMyOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBikesMy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostBikes создатьs байк

Создание нового байка
*/
func (a *Client) PostBikes(params *PostBikesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostBikesCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostBikesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBikes",
		Method:             "POST",
		PathPattern:        "/bikes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBikesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostBikesCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBikes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutBikesID обновитьs байк

Обновление данных байка
*/
func (a *Client) PutBikesID(params *PutBikesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutBikesIDOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPutBikesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutBikesID",
		Method:             "PUT",
		PathPattern:        "/bikes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBikesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PutBikesIDOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutBikesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
