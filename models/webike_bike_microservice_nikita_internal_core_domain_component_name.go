// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName webike bike microservice nikita internal core domain component name
//
// swagger:model webike_bike_microservice_nikita_internal_core_domain.ComponentName
type WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName string

func NewWebikeBikeMicroserviceNikitaInternalCoreDomainComponentName(value WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName) *WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName.
func (m WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName) Pointer() *WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName {
	return &m
}

const (

	// WebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameHandlebars captures enum value "handlebars"
	WebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameHandlebars WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName = "handlebars"

	// WebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameFrame captures enum value "frame"
	WebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameFrame WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName = "frame"

	// WebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameWheels captures enum value "wheels"
	WebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameWheels WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName = "wheels"
)

// for schema
var webikeBikeMicroserviceNikitaInternalCoreDomainComponentNameEnum []any

func init() {
	var res []WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName
	if err := json.Unmarshal([]byte(`["handlebars","frame","wheels"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webikeBikeMicroserviceNikitaInternalCoreDomainComponentNameEnum = append(webikeBikeMicroserviceNikitaInternalCoreDomainComponentNameEnum, v)
	}
}

func (m WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName) validateWebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameEnum(path, location string, value WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName) error {
	if err := validate.EnumCase(path, location, value, webikeBikeMicroserviceNikitaInternalCoreDomainComponentNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this webike bike microservice nikita internal core domain component name
func (m WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWebikeBikeMicroserviceNikitaInternalCoreDomainComponentNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this webike bike microservice nikita internal core domain component name based on context it is used
func (m WebikeBikeMicroserviceNikitaInternalCoreDomainComponentName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
