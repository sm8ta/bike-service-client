// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPComponentRequest http component request
//
// swagger:model http.ComponentRequest
type HTTPComponentRequest struct {

	// bike id
	// Example: 123e4567-e89b-12d3-a456-426614174000
	// Required: true
	BikeID *string `json:"bike_id"`

	// brand
	// Example: Shimano
	Brand string `json:"brand,omitempty"`

	// installed mileage
	// Example: 1000
	// Required: true
	InstalledMileage *int64 `json:"installed_mileage"`

	// max mileage
	// Example: 5000
	// Required: true
	MaxMileage *int64 `json:"max_mileage"`

	// model
	// Example: Deore XT
	Model string `json:"model,omitempty"`

	// name
	// Example: handlebars
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this http component request
func (m *HTTPComponentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBikeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledMileage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMileage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPComponentRequest) validateBikeID(formats strfmt.Registry) error {

	if err := validate.Required("bike_id", "body", m.BikeID); err != nil {
		return err
	}

	return nil
}

func (m *HTTPComponentRequest) validateInstalledMileage(formats strfmt.Registry) error {

	if err := validate.Required("installed_mileage", "body", m.InstalledMileage); err != nil {
		return err
	}

	return nil
}

func (m *HTTPComponentRequest) validateMaxMileage(formats strfmt.Registry) error {

	if err := validate.Required("max_mileage", "body", m.MaxMileage); err != nil {
		return err
	}

	return nil
}

func (m *HTTPComponentRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http component request based on context it is used
func (m *HTTPComponentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPComponentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPComponentRequest) UnmarshalBinary(b []byte) error {
	var res HTTPComponentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
