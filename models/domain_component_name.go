// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DomainComponentName domain component name
//
// swagger:model domain.ComponentName
type DomainComponentName string

func NewDomainComponentName(value DomainComponentName) *DomainComponentName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DomainComponentName.
func (m DomainComponentName) Pointer() *DomainComponentName {
	return &m
}

const (

	// DomainComponentNameHandlebars captures enum value "handlebars"
	DomainComponentNameHandlebars DomainComponentName = "handlebars"

	// DomainComponentNameFrame captures enum value "frame"
	DomainComponentNameFrame DomainComponentName = "frame"

	// DomainComponentNameWheels captures enum value "wheels"
	DomainComponentNameWheels DomainComponentName = "wheels"
)

// for schema
var domainComponentNameEnum []any

func init() {
	var res []DomainComponentName
	if err := json.Unmarshal([]byte(`["handlebars","frame","wheels"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainComponentNameEnum = append(domainComponentNameEnum, v)
	}
}

func (m DomainComponentName) validateDomainComponentNameEnum(path, location string, value DomainComponentName) error {
	if err := validate.EnumCase(path, location, value, domainComponentNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this domain component name
func (m DomainComponentName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDomainComponentNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this domain component name based on context it is used
func (m DomainComponentName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
