// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DomainBikeType domain bike type
//
// swagger:model domain.BikeType
type DomainBikeType string

func NewDomainBikeType(value DomainBikeType) *DomainBikeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DomainBikeType.
func (m DomainBikeType) Pointer() *DomainBikeType {
	return &m
}

const (

	// DomainBikeTypeBmx captures enum value "bmx"
	DomainBikeTypeBmx DomainBikeType = "bmx"

	// DomainBikeTypeMtb captures enum value "mtb"
	DomainBikeTypeMtb DomainBikeType = "mtb"

	// DomainBikeTypeRoad captures enum value "road"
	DomainBikeTypeRoad DomainBikeType = "road"
)

// for schema
var domainBikeTypeEnum []any

func init() {
	var res []DomainBikeType
	if err := json.Unmarshal([]byte(`["bmx","mtb","road"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainBikeTypeEnum = append(domainBikeTypeEnum, v)
	}
}

func (m DomainBikeType) validateDomainBikeTypeEnum(path, location string, value DomainBikeType) error {
	if err := validate.EnumCase(path, location, value, domainBikeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this domain bike type
func (m DomainBikeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDomainBikeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this domain bike type based on context it is used
func (m DomainBikeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
